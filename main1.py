import pandas as pd
#Добавление и удаление столбцов и строк с помощью функций Pandas

#Для начала необходимо считать таблицу, для этого прописываем команду
# read, а в круглых скобках указываем название файла, содержащего
# нужную таблицу:

df = pd.read_csv('hh .csv')
print("Начальное содержание")
print(df)

#Добавим к таблице столбец. Для этого после переменной df нужно
# прописать название столбца, который мы будем создавать.
# Мы создадим столбец с названием Test и положим в него столько
# значений, сколько у нас уже есть:

df['Test'] = [new for new in range(48)]

#Цикл for здесь будет перебирать список, который создаётся с
# помощью команды range из 48 чисел (от 0 до 47) и будет
# подставлять их в список, где они будут сохраняться.

#ыведем результат, для этого прописываем:
print(" Содержание после добавления столбца")
print(df)
#Видим, что к таблице добавился столбец Test:


#4. Рассмотрим, как удалять столбцы и строки в датасете.
# Для этого используется функция drop. Если надо удалить столбец,
# указываем в круглых скобках название этого столбца.
# Также после названия столбца мы используем параметр axis
# со значением либо 0 (в случае удаления строк), либо 1
# (в случае удаления столбцов).
#Следующий параметр, который мы используем — это inplace.
# Он нужен, чтобы показывать, что изменения, которые мы вносим,
# должны быть внесены в исходный датафрейм —
# в этом случае для этого параметра прописывается значение True.
# В случае, если значение этого параметра False,
# оригинальный датафрейм останется неизменным.
# Учитывая всё вышесказанное, прописываем:

df.drop('Test', axis=1, inplace=True)
print(df)

#Видим, что столбец Test удалён, и в качестве последнего столбца
# в окне вывода теперь показывается столбец "Ссылка на вакансию".


#5. Удалим конкретную строку. Как мы уже узнаем, для этого параметр
# axis должен быть равен 0. Вместо названия столбца мы указываем
# индекс строки. Прописываем:

df.drop(47, axis=0, inplace=True)
print(df)
#Теперь последняя, 48-я строка, удалена из датафрейма.

#6. Чтобы сохранить изменения в таблицах (удаление и добавление столбцов,
# строк и т.д.), необходимо использовать функцию to_csv,
# а в круглых скобках указать место сохранения.
# Для сохранения данных прописываем:

df.to_csv('output.csv', index=False)